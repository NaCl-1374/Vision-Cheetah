/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class footsteps implements lcm.lcm.LCMEncodable
{
    public float xpos[];
    public float ypos[];
    public float zpos[];
 
    public footsteps()
    {
        xpos = new float[4];
        ypos = new float[4];
        zpos = new float[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x5a1eaf779d25ac7aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.footsteps.class))
            return 0L;
 
        classes.add(lcmtypes.footsteps.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.xpos[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.ypos[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.zpos[a]); 
        }
 
    }
 
    public footsteps(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public footsteps(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.footsteps _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.footsteps o = new lcmtypes.footsteps();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.xpos = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.xpos[a] = ins.readFloat();
        }
 
        this.ypos = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.ypos[a] = ins.readFloat();
        }
 
        this.zpos = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.zpos[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.footsteps copy()
    {
        lcmtypes.footsteps outobj = new lcmtypes.footsteps();
        outobj.xpos = new float[(int) 4];
        System.arraycopy(this.xpos, 0, outobj.xpos, 0, 4); 
        outobj.ypos = new float[(int) 4];
        System.arraycopy(this.ypos, 0, outobj.ypos, 0, 4); 
        outobj.zpos = new float[(int) 4];
        System.arraycopy(this.zpos, 0, outobj.zpos, 0, 4); 
        return outobj;
    }
 
}

